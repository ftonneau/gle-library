! Library for bump charts.

! Copyright (c) 2020 Francois Tonneau
! License: MIT

! ------------------------------
! LIBRARY SUMMARY
! ------------------------------

! This library provides a subroutine to draw bump charts (i.e., line charts that
! show the evolution of a set of rankings over time).

! ------------------------------
! SUBROUTINE DETAILS
! ------------------------------

! Name: bumpchart

! -----------
! Parameters
! -----------

!   filename  = file with the data to be plotted

!   dist_LL   = cm from left label to left axis
!   just_LL   = left-label justification (l, c, or r)
!   dist_L    = cm from left ranking to left axis
!   just_L    = left-ranking justification (l, c, or r)

!   dist_R    = cm from right axis to right ranking
!   just_R    = right-ranking justification (l, c, or r)
!   dist_RR   = cm from right axis to right label
!   just_RR   = right-label justification (l, c, or r)

!   linewidth : [default 0.03]
!   linecolor : line color when not customized [default gray10]
!   textcolor : text color when not customized [default black]
!   dotsize   : [default 0.06; use 0 to avoid drawing dots]
!   dotstyle  : open or closed [default closed]
!   overwidth : [default 0; > 0 to have whiteout at line crossings]

! ------------
! Data format
! ------------

! The first row of the datafile should contain:

! number_of_data_rows   number_of_y_values_per_row

! Each row below the first specifies one line in the chart and should contain
! the following fields:

! category left_label left_rank right_rank right_label y1 y2 y3 ...

! - category is an unquoted string (no spaces) that may be used to colorize
!   the corresponding labels and line
! - left_label and right_label are quoted strings (spaces admitted) that will
!   appear as category labels on the chart; left_label and right_label are most
!   often identical, but either may be replaced by -- to prevent it from being
!   printed
! - left_rank and right_rank are the rankings of the category at the start and
!   at the end of the time period being plotted; either ranking may be replaced
!   by -- to prevent it from being printed
! - y1, y2, ... are rank data; missing data should be replaced by --

! -----
! Notes
! -----

! Fields should be tab-separated and the number of y values (including missing
! values: --) should be constant.

! The line and label color of any category can be customized by writing:

! category$ = custom_color

! in the GLE script before calling bumpchart.

! ------------------------------
! IMPLEMENTATION
! ------------------------------

sub bumps_accept string$
    if string$ = "--" then
        return false
    else
        return true
    end if
end sub

sub bumps_choice$ code$ fallback$
    local hue$ = eval(code$+"$")
    if hue$ = "" then
        hue$ = fallback$
    end if
    return hue$
end sub

sub bumps_write area$ dist align$ level string$
    if bumps_accept(string$) then
        if area$ = "LEFT" then
            amove xg(xgmin)-dist level
        else
            amove xg(xgmax)+dist level
        end if
        ! We use a correction to improve the vertical centering of strings with
        ! different ascender and descender heights.
        local top_correction = theight(string$) - theight("x")/2
        local top_just$ = "t" + align$
        rmove 0  top_correction
        set just top_just$
        write string$
        rmove 0 -top_correction
    end if
end sub

sub bumpchart filename$ &
    dist_LL just_LL$ &
    dist_L  just_L$  &
    dist_R  just_R$  &
    dist_RR just_RR$ &
    linewidth linecolor$ textcolor$ &
    dotsize dotstyle$ &
    overwidth
    !
    default linewidth 0.03
    default linecolor gray10
    default textcolor black
    default dotsize   0.06
    default dotstyle  closed
    default overwidth 0
    !
    local nrows, ncols, row, col
    local code$, str_LL$, str_L$, str_R$, str_RR$
    local datum$, y, y_old, y_end
    local tracing$
    !
    gsave
    fopen filename$ stream read
    fread stream nrows ncols
    for row = 1 to nrows
        !
        tracing$ = "no"
        fread stream code$ str_LL$ str_L$ str_R$ str_RR$
        !
        for col = 1 to ncols
            fread stream datum$
            if (tracing$ = "no") and bumps_accept(datum$) then
                !
                ! On first valid datum, write left strings and start tracing.
                y = val(datum$)
                set color bumps_choice$(code$, textcolor$)
                bumps_write LEFT dist_LL just_LL$ yg(y) str_LL$
                bumps_write LEFT dist_L  just_L$  yg(y) str_L$
                y_old = y
                y_end = y
                tracing$ = "yes"
            else if (tracing$ = "yes") and bumps_accept(datum$) then
                !
                ! On each later valid datum, connect data points.
                y = eval(datum$)
                if overwidth > 0 then
                    set cap butt lwidth overwidth color white
                    amove xg(col-1) yg(y_old)
                    aline xg(col)   yg(y)
                end if
                set cap round join round lwidth linewidth
                set color bumps_choice$(code$, linecolor$)
                amove xg(col-1) yg(y_old)
                aline xg(col)   yg(y)
                if dotsize > 0 then
                    amove xg(col-1) yg(y_old)
                    if dotstyle$ = "closed" then
                        set fill bumps_choice$(code$, linecolor$)
                    else
                        set fill white
                    end if
                    circle dotsize/2
                    amove xg(col)   yg(y)
                    circle dotsize/2
                end if
                y_old = y
                y_end = y
            end if
        next col
        !
        ! Finish the row by writing strings on the right.
        set color bumps_choice$(code$, textcolor$)
        bumps_write RIGHT dist_RR just_RR$ yg(y_end) str_RR$
        bumps_write RIGHT dist_R  just_R$  yg(y_end) str_R$
        !
    next row
    fclose stream
    !
    grestore
end sub

